// ==UserScript==
// @name         Crypto Kitty Info Extension
// @namespace    https://github.com/HaJaeKyung/KittyExtension
// @version      0.31
// @description  Adds stat info to the site
// @author       HaJaeKyung
// @match        *.cryptokitties.co/*
// @grant        none
// @require      https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.18.2/babel.js
// @require      http://code.jquery.com/jquery-3.2.1.min.js
// ==/UserScript==

/* jshint ignore:start */
var inline_src = (<><![CDATA[
/* jshint ignore:end */
    /* jshint esnext: false */
    /* jshint esversion: 6 */

    // Your code here...

/* jshint ignore:start */
]]></>).toString();
var c = Babel.transform(inline_src, { presets: [ "es2015", "es2016" ] });
eval(c.code);
/* jshint ignore:end */

const getJSON = (url) => fetch(url).then(response => response.json());
let switchPrice;

const rarityTable = {
  "oldlace":{"count":0.017},
  "wolfgrey":{"count":0.0421},
  "gerbil":{"count":0.0754},
  "cottoncandy":{"count":0.13},
  "violet":{"count":0.2525},
  "wingtips":{"count":0.267},
  "mainecoon":{"count":0.4731},
  "jaguar":{"count":0.8789},
  "cerulian":{"count":1.0146},
  "chartreux":{"count":1.3721},
  "googly":{"count":1.4286},
  "fabulous":{"count":1.509},
  "whixtensions":{"count":1.651},
  "peach":{"count":3.1255},
  "bubblegum":{"count":3.4188},
  "dali":{"count":3.5325},
  "otaku":{"count":4.0565},
  "skyblue":{"count":4.8908},
  "gold":{"count":5.0987},
  "bloodred":{"count":5.2143},
  "scarlet":{"count":5.306},
  "tigerpunk":{"count":5.4725},
  "limegreen":{"count":5.8042},
  "beard":{"count":6.6335},
  "cloudwhite":{"count":6.9049},
  "emeraldgreen":{"count":7.1863},
  "laperm":{"count":7.5752},
  "spock":{"count":7.5966},
  "calicool":{"count":7.6506},
  "barkbrown":{"count":7.7587},
  "chestnut":{"count":8.5854},
  "tongue":{"count":9.2476},
  "mauveover":{"count":9.6534},
  "cymric":{"count":11.437},
  "shadowgrey":{"count":13.4737},
  "coffee":{"count":13.5572},
  "saycheese":{"count":14.4958},
  "salmon":{"count":14.6102},
  "royalpurple":{"count":14.9337},
  "mintgreen":{"count":15.7441},
  "swampgreen":{"count":16.1462},
  "chocolate":{"count":16.1606},
  "lemonade":{"count":16.4333},
  "sphynx":{"count":16.5715},
  "topaz":{"count":16.6437},
  "simple":{"count":16.765},
  "orangesoda":{"count":17.0533},
  "aquamarine":{"count":17.304},
  "greymatter":{"count":17.3587},
  "munchkin":{"count":17.6967},
  "raisedbrow":{"count":18.5435},
  "happygokitty":{"count":19.4054},
  "soserious":{"count":19.6398},
  "strawberry":{"count":20.2291},
  "ragamuffin":{"count":20.3453},
  "sizzurp":{"count":20.9509},
  "himalayan":{"count":21.047},
  "pouty":{"count":21.7745},
  "crazy":{"count":26.5899},
  "thicccbrowz":{"count":27.3055},
  "luckystripe":{"count":28.8785},
  "kittencream":{"count":40.046},
  "granitegrey":{"count":40.8979},
  "totesbasic":{"count":45.9847}
};

const cooldownList = ["Fast", "Swift", "Snappy", "Brisk", "Plodding", "Slow", "Sluggish", "Catatonic"];
const cooldownValueList = ["Fast","Swift","Swift","Snappy","Snappy","Brisk","Brisk","Plodding","Plodding","Slow","Slow","Sluggish","Sluggish","Catatonic"];


const getRarityColor = (rarity) => {
    if (rarity <= 0.15) return '#ff0dbf'; // legendary
    if (rarity <= 1.8) return '#ff8000'; // legendary
    if (rarity <= 8) return '#a335ee'; // epic
    if (rarity <= 16) return '#0070ff'; // rare
    return 'white';
};

const getMultiplier = (perc) => {
    if (perc <= 0.4) return 1.55;
    if (perc <= 1.8) return 1.25;
    if (perc <= 5) return 1.05;
    if (perc <= 10) return 1.025;
    return 1;
};

const getAttrScore = (perc) => {
    if (perc <= 0.4) return 3;
    if (perc <= 1.8) return 2;
    if (perc <= 5) return 1;
    if (perc <= 10) return 1;
    return 0;
};


const onReady = () => {
    console.log('CryptoKitties Extension Loaded');
    const extensionCSS = `
.extAttUl { overflow: visible; z-index: 3;  padding: 0px; margin: 0px; }
.extAtt { min-width: 75px; padding-left: 2px; padding-right: 2px; color: rgba(255,255,255, 0.99); text-align: center; line-height: 1.85rem; font-size: 1.6rem; border-style: solid; border-color: rgba(66, 66, 66, 0.35); border-width: 1.5px; border-radius: 20px; background-color: #00bcd4; }
.extBounce {animation: mover 1s infinite  alternate; padding-right: 2px;} @keyframes mover {0% { transform: translateY(0); }100% { transform: translateY(-6px); }
.extWrapper {position:absolute; bottom: 0; right: 0; display: flex; flex-direction: row-reverse; align-items: flex-end; }
.extUSD {  z-index: 100; position:absolute; top:0; left:0; box-shadow: 0 3px rgba(143, 141, 138, 0.6); border-width: 0.5px; background-color: #dff7f1; }
.extUSD:focus {  outline:0; } .extUSD:active {  box-shadow: 0 1px rgba(143, 141, 118, 0.6); transform: translateY(2px);} .extUSD:hover {background-color:#dff7f1;}
.extCD {  font-size: 1.1rem; font-weight: 100; }
.KittyCard { overflow: visible; }`;
    const css = document.createElement('style');
    css.innerHTML = extensionCSS;
    document.head.appendChild(css);

    const version = "0.31";
    let foundId = [];
    let curCat = 'n/a';
    let curId = 'n/a';
    let hasChanged = false;
    let ethPrice = false;
    let url = location.href;
    let restrictAPI = 0;
    document.body.addEventListener('click', () => {
        requestAnimationFrame(()=> {
            if (url!==location.href) {
                //Clears id cache on page change
                foundId = [];
                url = location.href;
            }
        });
    }, true);
    let tbl = rarityTable;
    function saveStorage(id, cattributes) {
        if (window.location.pathname == "/my-kitties") {
            storageMyTbl['id'+id] = cattributes;
            localStorage.setItem('kittyExtensionMyTbl', JSON.stringify(storageMyTbl));
        } else {
            storageTbl['id'+id] = cattributes;
            if (Object.keys(storageTbl).length > 1000) {
                for (let first in storageTbl) break;
                delete storageTbl[first];
            }
            localStorage.setItem('kittyExtensionTbl', JSON.stringify(storageTbl));
        }
    }
    function checkVersion(){
        if(hasLocalStorage){
            let savedVersion = localStorage.getItem('kittyExtensionVersion') || 0;
            if (savedVersion !== version){
                localStorage.setItem('kittyExtensionTbl', JSON.stringify({}));
                localStorage.setItem('kittyExtensionMyTbl', JSON.stringify({}));
                localStorage.setItem('kittyExtensionVersion', version);
                console.log('New version loaded:',version);
            }
        }
    }

    let hasLocalStorage = typeof(Storage) !== "undefined";
    checkVersion();
    let storageTbl = JSON.parse(localStorage.getItem('kittyExtensionTbl')) || {};
    let storageMyTbl = JSON.parse(localStorage.getItem('kittyExtensionMyTbl')) || {};
    let currency = localStorage.getItem('kittyExtensionEtherUSD') || "💲👎";

    getJSON("https://api.coinmarketcap.com/v1/ticker/ethereum/").then(data => {
        ethPrice = parseFloat(data[0].price_usd);
        console.log('Kitty: ETH Price is', ethPrice);
        const button = document.createElement('button');
        button.addEventListener('click', switchPrice, false);
        button.className = 'extUSD extAtt';
        button.innerHTML = currency;
        document.body.appendChild(button)
        changePrices();
    });
    function getColor(catt) {
        const attr = tbl[catt];
        const perc = attr && attr.count;
        const color = attr ? getRarityColor(perc) : "rgba(255,255,255, 0.98)";
        const rounded = attr ? (perc < 1 ? perc.toFixed(3) : perc.toFixed(1)) : '0.00'
        const count = attr ?
            perc <= 20 ? " ("+ rounded +"%)" : " (20%+)" :
            " (Ultra%)";
        return [color, count];
    }

    function requestId(element, stats) {
        getJSON("https://api.cryptokitties.co/kitties/" + stats.id).then(data => {
            finalizeOverlay(data.cattributes, element, stats);
            if (hasLocalStorage) {
                if (data.children.length === 0) {
                    let ul = element.getElementsByClassName("extWrapper")[0];
                    ul.innerHTML += "<ul class='extAttUl'><li style='list-style: none;' class='extAtt'><span style='font-weight: 500;'>&nbsp;virgin&nbsp;</span></li></ul>";
                }

                if (!data.status.is_ready) {
                    let note = element.getElementsByClassName('KittyStatus-note');
                    let cd = (((data.status.cooldown - Date.now())/6000/600));
                    let time = timeDisplay(cd * 3600);
                    note[note[1] ? 1 : 0].textContent = time;
                }
                saveStorage(stats.id, data.cattributes);
            }
        }, () => {
            let ul = element.getElementsByClassName("extAttUl")[0];
            ul.classList.remove("extBounce");
            ul.innerHTML = "😿";
        });
    }

    function timeDisplay(seconds) {
        if (typeof seconds === "number") {
            seconds = Math.floor(seconds);
            let hourS = seconds / 3600;
            let minute = Math.floor(seconds / 60);
            let second = seconds % 60;
            second = second < 10 ? '0'+second : second;
            if (hourS> 1) {
                let hour = Math.floor(seconds / 3600);
                minute = minute % 60;
                minute = minute < 10 ? '0' + minute : minute;
                if (hourS > 24) {
                    return hour + ' hours';
                } else {
                    return hour + ':' + minute;
                }
            } else {
                return minute + ' minutes';
            }
        } else {
            return '';
        }
    }

    function finalizeOverlay(cattributes, element, stats) {
        let ul = element.getElementsByClassName("extAttUl")[0];
        ul.classList.remove("extBounce");
        ul.innerHTML = "";
        for (let x in cattributes) {
            if (cattributes[x]) {
                let background_color = getColor(cattributes[x].description)[0];
                let color = background_color == 'white' ? 'rgba(0,0,0, 0.76)' : 'rgba(255,255,255, 0.98)';
                ul.innerHTML += "<li class='extAtt' style=\'background-color:"+background_color+"; color: "+color+"\'>"+cattributes[x].description+"</li>";
            }
        }

        if (window.location.hostname == 'www.cryptokitties.co') {
            calcPrice(stats.id , cattributes, stats, element);
        }
    }

    function isValidId(id) {
      return !isNaN(id) && id !== "" && id.substring(0,2) != "0x" && id != curId && !foundId.includes(id) && !document.URL.includes("activity");
    }

    //Creates overlay on hover
    var timer = Date.now();
    function overlay() {
        let nativeElement = $( this )[0];
        let id = /[^/]*$/.exec(nativeElement)[0];
        if (isValidId(id)) {
            curId = id;
            foundId.push(id);
            let mainSite = window.location.hostname == 'www.cryptokitties.co';
            let element = mainSite ? nativeElement.getElementsByClassName('KittyCard')[0] : nativeElement;
            if (element) {
                let stats = {"id": curId, "fast":false, "gen": false, "cd": false};
                if (mainSite) {
                    let status = nativeElement.getElementsByClassName('KittyCard-status')[0];
                    if (status) {
                        stats.cd = status.innerHTML.includes("Resting");
                    }
                    let speed = nativeElement.getElementsByClassName('KittyCard-coldown')[0];
                    if (speed) {
                        stats.fast = cooldownList.indexOf(speed.innerText);
                    }
                    stats.gen = nativeElement.getElementsByClassName('KittyCard-subname')[0].innerText.split('Gen ').pop();
                }
                element.innerHTML += "<div class='extWrapper'><ul style='list-style: none;' class='extBounce extAttUl'>🐈</ul></div>";

                setTimeout(()=> {
                    console.log('KittyExtension: Requesting - '+ id);
                    requestId(element, stats);
                }, timer - Date.now());

                restrictAPI += 1000;
                setTimeout(()=> {
                    restrictAPI -= 1000;
                }, 1000);
                timer = Date.now() + restrictAPI;
            }
        }
    }
    $( "body").on( "mouseover", "a", overlay);

    //Updates attributes on specific kitty page
    setInterval(() => {
        let curPage = document.getElementsByClassName("KittyHeader-details");
        if (curPage.length > 0 && curPage[0].innerHTML.substr(0, curPage[0].innerHTML.indexOf('</span>')) != curCat) {
            curCat = curPage[0].innerHTML.substr(0, curPage[0].innerHTML.indexOf('</span>'));
            if (document.getElementsByClassName("ListAttributes-item").length > 0) {
                let cattributes = document.getElementsByClassName("ListAttributes-item");

                for (let att in cattributes) {
                    if (cattributes[att].style) {
                        let catt = cattributes[att].innerText;
                        let arr = getColor(catt);
                        let color = arr[0];
                        let num = arr[1];
                        cattributes[att].style.backgroundColor = color;
                        cattributes[att].style.color = color == 'white' ? '#000' : '#fff';
                        cattributes[att].innerHTML += num;
                    }
                }
            }
        }
    }, 2000);

    function calcPrice(id, cattributes, stats, element) {
        let base = "https://api.cryptokitties.co/auctions";
        let query = "?type=sale&limit=15&sorting=cheap&orderBy=current_price&orderDirection=asc&sorting=cheap&status=open&search=";
        let totalGen = 'gen:' + stats.gen;
        if (stats.gen >= 10) {
            totalGen += 'gen:'+(stats.gen-1)+' gen:';
            totalGen += parseInt(stats.gen)+1;
        }
        let rareTbl = getBestRares(cattributes);
        let search = totalGen + rareTbl[0];
        console.log('totalGen', totalGen);
        console.log('rareTbl', rareTbl[0]);

        const finalizePrice = (auction) => {
            const newMultiplier = stats.id == auction.kitty.id ? 1 : rareTbl[1];
            const nomralizePrice = auction.current_price / 1000000000000000000;
            return (nomralizePrice * newMultiplier).toFixed(2);
        };
        getJSON(base + query + search).then(data => {
            const rend = (price, isFast) => renderPrice(query + search, element, price, isFast)
            console.log(data);
            if (data.total <= 0) return rend(null, false);
            if (data.total === 1) {
                const first = data.auctions[0];
                first.kitty.id === id ?
                    rend(null, false) :
                    rend(finalizePrice(first), true);
            } else {
                for (let x = 0; x < data.auctions.length; x++) {
                    const isLastItem = x === (data.auctions.length - 1);
                    const auction = data.auctions[x];
                    const cooldownValue = cooldownList.indexOf(cooldownValueList[auction.kitty.status.cooldown_index]);
                    if ((stats.cd && stats.fast > 1) ||
                        (stats.fast > 4 || stats.fast >= cooldownValue) ||
                        (stats.cd && auction.kitty.status.is_ready) ||
                        (isLastItem)) {
                        rend(finalizePrice(auction), isLastItem);
                    }
                }
            }
        });
    }

    function renderPrice(url, element, price, isFast) {
        console.log('PRICING IS', price);
        if (price >= 50) {
            price = (Math.ceil(price / 10) * 10).toString();
            price += '+';
        } else if (isFast) {
            price = price.toString() + '+';
        }
        if (price == null) price = 'Name your price';
        console.log('Rendering price', url, price);
        let ul = element.getElementsByClassName("extWrapper")[0];
        ul.innerHTML += "<ul class='extAttUl' onclick='searchSimilarKitties(event, &quot;"+ url +"&quot;)'><li style='list-style: none;' class='extAtt'><span style='font-weight: 500;'>Score:</span> " + price + "</li></ul>";
    }

    function getBestRares(attrs, adjust) {
        const cattributes = Object.keys(attrs).map(attr => attrs[attr].description)
        const isFancy = cattributes.length === 0;
        let best = '';
        let hasRare = false;
        let count = adjust || 0;
        let score = isFancy ? 8 : 0;

        if (isFancy) hasRare = ' type:fancy';
        cattributes.forEach(x => {
            if (!tbl[cattributes[x]]) {
                best += ' ' + x;
                count += 3;
                hasRare = ' ' + x;
            }
        });
        let attrCount = 0;
        cattributes.forEach(attr => {
            if (tbl[attr]) {
                const toAdd = getAttrScore(tbl[attr].count);
                attrCount += toAdd;
            } else {
                attrCount += 5;
            }
        });
        if (!isFancy) score = (attrCount / 6 * 7) + 1;
        if (cattributes.length > 8) {
            score -= cattributes.length - 8;
        }
        console.log('Cat score is', score);
        return [best, score];
    }

    document.searchSimilarKitties = (e, query) => {
        e.preventDefault();
        window.location.href = "https://www.cryptokitties.co/marketplace/sale" + query;
    };

    function changePrices() {
        let items = document.getElementsByClassName('KittyStatus-itemText');
        if (ethPrice && items.length > 0 && document.getElementsByClassName('extUSD').length > 0) {
            for (let item of items) {
                if (item.parentElement.parentElement.className == "KittyStatus" || item.parentElement.parentElement.className == "KittyStatus KittyStatus--list") {
                    if (!item.parentElement.innerHTML.includes("Icon--timer") && !item.parentElement.innerHTML.includes('Bun in oven')) {
                        let cur = item.getElementsByTagName('span')[0].innerText.split(' ');

                        if (currency == "💲👍" && cur[0] != "$") {
                            let endPrice = (cur[1] * ethPrice ).toFixed(2);
                            if (endPrice != 'NaN') {
                                item.getElementsByTagName('span')[0].innerText = '$ ' + endPrice;
                            }
                        } else if (currency == "💲👎" && cur[0] != "Ξ") {
                            let endPrice = (cur[1] / ethPrice ).toFixed(4);
                            if (endPrice != 'NaN') {
                                item.getElementsByTagName('span')[0].innerText = 'Ξ ' + endPrice;
                            }
                        }
                    } else {
                    }
                }
            }
        }
    }

    let saleNum = 0;
    switchPrice = (e) => {
        e.preventDefault();
        hasChanged = true;
        let element = document.getElementsByClassName('extUSD')[0];
        currency = currency == "💲👍" ? "💲👎" : "💲👍";
        localStorage.setItem('kittyExtensionEtherUSD', currency);
        element.innerText = currency;
        changePrices();
    };

    document.addEventListener('DOMSubtreeModified', () => {
        const items = document.getElementsByClassName('KittyStatus-itemText');
        if (items.length != saleNum) {
            saleNum = items.length;
            if (hasChanged || currency == "💲👍") {
                changePrices();
            }
        }

        let mItems = document.getElementsByClassName('KittyStatus KittyStatus--multiple');
         [...mItems].forEach((i)=>{
             let replace = i.children[1].innerHTML.replace("Resting", "");
             let hasText = i.children[1].getElementsByClassName("KittyStatus-note")[0];
             if(hasText && hasText.textContent && hasText.textContent !== '') {
                 i.children[1].innerHTML = replace;
             }
             i.classList.remove('KittyStatus--multiple');
        });
    });
};

if (document.readyState === 'complete') {
    onReady();
} else {
    document.addEventListener('readystatechange', () => {
        if (document.readyState === 'complete') onReady();
    });
}

